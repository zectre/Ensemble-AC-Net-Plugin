# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ensembleacnet
                                 A QGIS plugin
 ensembleacnet
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by zectre
        email                : yogatriardhana@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys

if sys.stdout is None:
    sys.stdout = sys.__stdout__
    
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QPushButton
from tensorflow.keras.models import load_model
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ensembleacnet_dialog import ensembleacnetDialog
import os.path
from .scripts.preprocessing import *
from .scripts.processing import *
from .scripts.splitfile import *
import rasterio
from rasterio.merge import merge



class ensembleacnet:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ensembleacnet_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Ensemble AC-Net')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ensembleacnet', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ensembleacnet/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Ensemble AC-Net'),
                action)
            self.iface.removeToolBarIcon(action)

    def run_preprocessing(self):
        subprocess.run("./scripts/preprocessing.py")
        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ensembleacnetDialog()

        # Connect the clicked signal of the button to the run_preprocessing function
        self.dlg.pushButton.clicked.connect(self.run_preprocessing)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Get the currently selected map layer from the mMapLayerComboBox
            TOA = self.dlg.mMapLayerComboBox.currentLayer()
            TOA_file_path = TOA.source()
            
            Angle = self.dlg.mMapLayerComboBox_2.currentLayer()
            Angle_file_path = Angle.source()
            
            AOT = self.dlg.mMapLayerComboBox_3.currentLayer()
            AOT_file_path = AOT.source()
            
            WV = self.dlg.mMapLayerComboBox_4.currentLayer()
            WV_file_path = WV.source()

            # If a layer is selected, print its file path
            if TOA is not None:
                print(TOA.source())

            print("wewww")
            # List of raster files
            raster_files = [TOA_file_path, Angle_file_path, AOT_file_path, WV_file_path]

            # Output file
            output_file = r"C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\Merged.tif"

            # Create a virtual raster from the input raster files
            vrt = gdal.BuildVRT("temp.vrt", raster_files, separate=True)

            # Convert the virtual raster to a GeoTIFF file
            gdal.Translate(output_file, vrt, outputType=gdal.GDT_Float32)

            # Close the virtual raster
            vrt = None

            # Delete the virtual raster
            gdal.Unlink("temp.vrt")
            
            data_img, n_bands, n_row, n_col = load_data(output_file)
            patches_4D, n_patch = extract_patches(n_bands, n_row, n_col, data_img)
            path_save = r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\patches.npy'
            patch = save_patch(path_save, patches_4D)

            input_path = patch
            output_paths = [
                r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\TOA.npy',
                r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\Ang.npy',
                r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\AOT.npy',
                r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\WV.npy'
            ]
            split_and_save_data(input_path, output_paths)
            
            TOA_xtest, angles_xtest, AOT_xtest, WV_xtest = load_predictdata()
            model = load_model(r'c:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\ACNetmodelHypermodeltesDATASETNEWest.h5')
            y_prediction = model.predict([TOA_xtest, angles_xtest, AOT_xtest, WV_xtest])  # prediction from x_test using model above
            test_paths = r'e:\RESEARCH\dataset2\processing di PC\testing\rodeplate\timeseries\2018\10\output\forNN\acnet.npy'
            img_path = TOA_file_path
            output_path = r'C:\Users\Yoga\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\ensembleacnet\acnetweqweq.tif'
            reshape_and_save_prediction(test_paths, img_path, output_path)
            
            # load the output file into QGIS
            iface.addRasterLayer(output_path, "Output Layer")
            
            # Do something useful here - delete the line containing pass and
            pass
